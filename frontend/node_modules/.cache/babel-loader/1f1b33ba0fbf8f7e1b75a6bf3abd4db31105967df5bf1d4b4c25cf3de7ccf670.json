{"ast":null,"code":"/**\n * Recursively serialize a NewickNode tree into a Newick-format string (without trailing semicolon)\n * @param node - Newick tree node\n * @returns Newick string for the node subtree\n */\nexport function serialize(node) {\n  let newick = '';\n  if (node.branchset && node.branchset.length > 0) {\n    newick += \"(\".concat(node.branchset.map(serialize).join(','), \")\");\n  }\n  if (node.name) {\n    newick += node.name;\n  }\n  if (typeof node.length === 'number') {\n    newick += \":\".concat(node.length);\n  }\n  return newick;\n}","map":{"version":3,"names":["serialize","node","newick","branchset","length","concat","map","join","name"],"sources":["/Users/lucanest/Desktop/f.nosync/msaviz/frontend/node_modules/newick/dist/esm/tools/serialize.js"],"sourcesContent":["/**\n * Recursively serialize a NewickNode tree into a Newick-format string (without trailing semicolon)\n * @param node - Newick tree node\n * @returns Newick string for the node subtree\n */\nexport function serialize(node) {\n    let newick = '';\n    if (node.branchset && node.branchset.length > 0) {\n        newick += `(${node.branchset.map(serialize).join(',')})`;\n    }\n    if (node.name) {\n        newick += node.name;\n    }\n    if (typeof node.length === 'number') {\n        newick += `:${node.length}`;\n    }\n    return newick;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAASA,CAACC,IAAI,EAAE;EAC5B,IAAIC,MAAM,GAAG,EAAE;EACf,IAAID,IAAI,CAACE,SAAS,IAAIF,IAAI,CAACE,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IAC7CF,MAAM,QAAAG,MAAA,CAAQJ,IAAI,CAACE,SAAS,CAACG,GAAG,CAACN,SAAS,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC,MAAG;EAC5D;EACA,IAAIN,IAAI,CAACO,IAAI,EAAE;IACXN,MAAM,IAAID,IAAI,CAACO,IAAI;EACvB;EACA,IAAI,OAAOP,IAAI,CAACG,MAAM,KAAK,QAAQ,EAAE;IACjCF,MAAM,QAAAG,MAAA,CAAQJ,IAAI,CAACG,MAAM,CAAE;EAC/B;EACA,OAAOF,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}