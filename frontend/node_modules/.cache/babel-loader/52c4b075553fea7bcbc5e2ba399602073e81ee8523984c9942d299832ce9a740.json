{"ast":null,"code":"import { cast } from '../tools/cast';\nimport { getRoot } from '../tools/getRoot';\nimport { dfs } from '../tools/dfs';\nimport { map } from '../tools/map';\nimport { normalize } from '../tools/normalize';\nimport { serialize } from '../tools/serialize';\nimport { parse } from '../tools/parse';\nexport class Newick {\n  constructor(data) {\n    this.tree = cast(data);\n  }\n  getRoot() {\n    return getRoot(this.tree);\n  }\n  dfs(callback) {\n    return dfs(this.tree, callback);\n  }\n  map(callback) {\n    this.tree = map(this.tree, callback);\n  }\n  normalize() {\n    return normalize(this.tree);\n  }\n  serialize() {\n    return serialize(this.tree);\n  }\n  toString() {\n    return serialize(this.tree);\n  }\n  clone() {\n    // Deep clone by serializing and reparsing\n    return new Newick(this.serialize());\n  }\n  equal(anotherTree) {\n    return this.serialize().toLowerCase() === anotherTree.serialize().toLowerCase();\n  }\n  parse(string) {\n    return parse(string);\n  }\n}","map":{"version":3,"names":["cast","getRoot","dfs","map","normalize","serialize","parse","Newick","constructor","data","tree","callback","toString","clone","equal","anotherTree","toLowerCase","string"],"sources":["/Users/lucanest/Desktop/f.nosync/msaviz/frontend/node_modules/newick/dist/esm/entities/Newick.js"],"sourcesContent":["import { cast } from '../tools/cast';\nimport { getRoot } from '../tools/getRoot';\nimport { dfs } from '../tools/dfs';\nimport { map } from '../tools/map';\nimport { normalize } from '../tools/normalize';\nimport { serialize } from '../tools/serialize';\nimport { parse } from '../tools/parse';\nexport class Newick {\n    constructor(data) {\n        this.tree = cast(data);\n    }\n    getRoot() {\n        return getRoot(this.tree);\n    }\n    dfs(callback) {\n        return dfs(this.tree, callback);\n    }\n    map(callback) {\n        this.tree = map(this.tree, callback);\n    }\n    normalize() {\n        return normalize(this.tree);\n    }\n    serialize() {\n        return serialize(this.tree);\n    }\n    toString() {\n        return serialize(this.tree);\n    }\n    clone() {\n        // Deep clone by serializing and reparsing\n        return new Newick(this.serialize());\n    }\n    equal(anotherTree) {\n        return (this.serialize().toLowerCase() === anotherTree.serialize().toLowerCase());\n    }\n    parse(string) {\n        return parse(string);\n    }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,eAAe;AACpC,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,GAAG,QAAQ,cAAc;AAClC,SAASC,GAAG,QAAQ,cAAc;AAClC,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAO,MAAMC,MAAM,CAAC;EAChBC,WAAWA,CAACC,IAAI,EAAE;IACd,IAAI,CAACC,IAAI,GAAGV,IAAI,CAACS,IAAI,CAAC;EAC1B;EACAR,OAAOA,CAAA,EAAG;IACN,OAAOA,OAAO,CAAC,IAAI,CAACS,IAAI,CAAC;EAC7B;EACAR,GAAGA,CAACS,QAAQ,EAAE;IACV,OAAOT,GAAG,CAAC,IAAI,CAACQ,IAAI,EAAEC,QAAQ,CAAC;EACnC;EACAR,GAAGA,CAACQ,QAAQ,EAAE;IACV,IAAI,CAACD,IAAI,GAAGP,GAAG,CAAC,IAAI,CAACO,IAAI,EAAEC,QAAQ,CAAC;EACxC;EACAP,SAASA,CAAA,EAAG;IACR,OAAOA,SAAS,CAAC,IAAI,CAACM,IAAI,CAAC;EAC/B;EACAL,SAASA,CAAA,EAAG;IACR,OAAOA,SAAS,CAAC,IAAI,CAACK,IAAI,CAAC;EAC/B;EACAE,QAAQA,CAAA,EAAG;IACP,OAAOP,SAAS,CAAC,IAAI,CAACK,IAAI,CAAC;EAC/B;EACAG,KAAKA,CAAA,EAAG;IACJ;IACA,OAAO,IAAIN,MAAM,CAAC,IAAI,CAACF,SAAS,CAAC,CAAC,CAAC;EACvC;EACAS,KAAKA,CAACC,WAAW,EAAE;IACf,OAAQ,IAAI,CAACV,SAAS,CAAC,CAAC,CAACW,WAAW,CAAC,CAAC,KAAKD,WAAW,CAACV,SAAS,CAAC,CAAC,CAACW,WAAW,CAAC,CAAC;EACpF;EACAV,KAAKA,CAACW,MAAM,EAAE;IACV,OAAOX,KAAK,CAACW,MAAM,CAAC;EACxB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}