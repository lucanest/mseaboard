{"ast":null,"code":"export function parse(s) {\n  const ancestors = [];\n  let tree = {};\n  const tokens = s.split(/\\s*([;(),:])\\s*/);\n  let subtree;\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    switch (token) {\n      case '(':\n        {\n          // new branchset\n          subtree = {};\n          tree.branchset = [subtree];\n          ancestors.push(tree);\n          tree = subtree;\n          break;\n        }\n      case ',':\n        {\n          // another branch\n          subtree = {};\n          const parent = ancestors[ancestors.length - 1];\n          if (!parent.branchset) {\n            parent.branchset = [];\n          }\n          parent.branchset.push(subtree);\n          tree = subtree;\n          break;\n        }\n      case ')':\n        {\n          // close branch\n          tree = ancestors.pop();\n          break;\n        }\n      case ':':\n        // length follows — handled in default\n        break;\n      default:\n        {\n          const prev = tokens[i - 1];\n          if (prev === ')' || prev === '(' || prev === ',') {\n            tree.name = token;\n          } else if (prev === ':') {\n            tree.length = parseFloat(token);\n          }\n          break;\n        }\n    }\n  }\n  return tree;\n}","map":{"version":3,"names":["parse","s","ancestors","tree","tokens","split","subtree","i","length","token","branchset","push","parent","pop","prev","name","parseFloat"],"sources":["/Users/lucanest/Desktop/f.nosync/msaviz/frontend/node_modules/newick/dist/esm/tools/parse.js"],"sourcesContent":["export function parse(s) {\n    const ancestors = [];\n    let tree = {};\n    const tokens = s.split(/\\s*([;(),:])\\s*/);\n    let subtree;\n    for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        switch (token) {\n            case '(': {\n                // new branchset\n                subtree = {};\n                tree.branchset = [subtree];\n                ancestors.push(tree);\n                tree = subtree;\n                break;\n            }\n            case ',': {\n                // another branch\n                subtree = {};\n                const parent = ancestors[ancestors.length - 1];\n                if (!parent.branchset) {\n                    parent.branchset = [];\n                }\n                parent.branchset.push(subtree);\n                tree = subtree;\n                break;\n            }\n            case ')': {\n                // close branch\n                tree = ancestors.pop();\n                break;\n            }\n            case ':':\n                // length follows — handled in default\n                break;\n            default: {\n                const prev = tokens[i - 1];\n                if (prev === ')' || prev === '(' || prev === ',') {\n                    tree.name = token;\n                }\n                else if (prev === ':') {\n                    tree.length = parseFloat(token);\n                }\n                break;\n            }\n        }\n    }\n    return tree;\n}\n"],"mappings":"AAAA,OAAO,SAASA,KAAKA,CAACC,CAAC,EAAE;EACrB,MAAMC,SAAS,GAAG,EAAE;EACpB,IAAIC,IAAI,GAAG,CAAC,CAAC;EACb,MAAMC,MAAM,GAAGH,CAAC,CAACI,KAAK,CAAC,iBAAiB,CAAC;EACzC,IAAIC,OAAO;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAME,KAAK,GAAGL,MAAM,CAACG,CAAC,CAAC;IACvB,QAAQE,KAAK;MACT,KAAK,GAAG;QAAE;UACN;UACAH,OAAO,GAAG,CAAC,CAAC;UACZH,IAAI,CAACO,SAAS,GAAG,CAACJ,OAAO,CAAC;UAC1BJ,SAAS,CAACS,IAAI,CAACR,IAAI,CAAC;UACpBA,IAAI,GAAGG,OAAO;UACd;QACJ;MACA,KAAK,GAAG;QAAE;UACN;UACAA,OAAO,GAAG,CAAC,CAAC;UACZ,MAAMM,MAAM,GAAGV,SAAS,CAACA,SAAS,CAACM,MAAM,GAAG,CAAC,CAAC;UAC9C,IAAI,CAACI,MAAM,CAACF,SAAS,EAAE;YACnBE,MAAM,CAACF,SAAS,GAAG,EAAE;UACzB;UACAE,MAAM,CAACF,SAAS,CAACC,IAAI,CAACL,OAAO,CAAC;UAC9BH,IAAI,GAAGG,OAAO;UACd;QACJ;MACA,KAAK,GAAG;QAAE;UACN;UACAH,IAAI,GAAGD,SAAS,CAACW,GAAG,CAAC,CAAC;UACtB;QACJ;MACA,KAAK,GAAG;QACJ;QACA;MACJ;QAAS;UACL,MAAMC,IAAI,GAAGV,MAAM,CAACG,CAAC,GAAG,CAAC,CAAC;UAC1B,IAAIO,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,EAAE;YAC9CX,IAAI,CAACY,IAAI,GAAGN,KAAK;UACrB,CAAC,MACI,IAAIK,IAAI,KAAK,GAAG,EAAE;YACnBX,IAAI,CAACK,MAAM,GAAGQ,UAAU,CAACP,KAAK,CAAC;UACnC;UACA;QACJ;IACJ;EACJ;EACA,OAAON,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}