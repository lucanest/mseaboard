{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import*as d3 from'd3';import{jsx as _jsx}from\"react/jsx-runtime\";const PhyloTreeViewer=_ref=>{let{newick:newickStr,isNhx=false}=_ref;const containerRef=useRef();const[debugInfo,setDebugInfo]=useState('');// Enhanced Newick parser that properly handles NHX annotations\nconst parseNewick=newickString=>{let pos=0;const parseNode=()=>{const node={name:'',length:0,children:[]};// Skip whitespace\nwhile(pos<newickString.length&&/\\s/.test(newickString[pos]))pos++;if(pos>=newickString.length)return node;// Handle internal node with children\nif(newickString[pos]==='('){pos++;// skip '('\n// Parse children\ndo{// Skip whitespace\nwhile(pos<newickString.length&&/\\s/.test(newickString[pos]))pos++;if(newickString[pos]===')')break;node.children.push(parseNode());// Skip whitespace\nwhile(pos<newickString.length&&/\\s/.test(newickString[pos]))pos++;if(newickString[pos]===','){pos++;// skip ','\n}}while(pos<newickString.length&&newickString[pos]!==')');if(newickString[pos]===')')pos++;// skip ')'\n}// Parse name (including NHX annotations)\nlet name='';while(pos<newickString.length){const char=newickString[pos];if(char===':'||char===','||char===')'||char===';'){break;}// Handle NHX annotations - include everything between [&&NHX: and ]\nif(char==='['&&newickString.substr(pos,6)==='[&&NHX'){let nhxEnd=pos;while(nhxEnd<newickString.length&&newickString[nhxEnd]!==']'){nhxEnd++;}if(nhxEnd<newickString.length)nhxEnd++;// include the closing ]\nname+=newickString.substring(pos,nhxEnd);pos=nhxEnd;}else{name+=char;pos++;}}node.name=name.trim();// Parse branch length\nif(pos<newickString.length&&newickString[pos]===':'){pos++;// skip ':'\nlet lengthStr='';while(pos<newickString.length&&/[\\d.eE+-]/.test(newickString[pos])){lengthStr+=newickString[pos++];}node.length=parseFloat(lengthStr)||0;// — now pull in any NHX annotation that follows the length —\nwhile(pos<newickString.length&&newickString[pos]==='['&&newickString.substr(pos,6)==='[&&NHX'){let annStart=pos;// find the closing bracket\nlet annEnd=annStart;while(annEnd<newickString.length&&newickString[annEnd]!==']'){annEnd++;}if(annEnd<newickString.length)annEnd++;// include the ']'\n// append it onto the “name” field so extractNhxData will see it\nnode.name+=newickString.substring(annStart,annEnd);pos=annEnd;}}return node;};return parseNode();};useEffect(()=>{if(!newickStr)return;const container=containerRef.current;if(!container)return;// Clear previous content\nd3.select(container).selectAll('*').remove();console.log('📄 Raw Newick/NHX input:',newickStr.slice(0,200));setDebugInfo(\"Processing: \".concat(newickStr.slice(0,100),\"...\"));let parsed;try{parsed=parseNewick(newickStr);console.log('✅ Parsed tree:',parsed);}catch(err){console.error('❌ Failed to parse Newick:',err);setDebugInfo(\"Parse error: \".concat(err.message));return;}const extractNhxData=nameWithNhx=>{if(!nameWithNhx||!isNhx)return{name:nameWithNhx||'',nhx:{}};const nhxMatch=nameWithNhx.match(/\\[&&NHX:([^\\]]+)\\]/);if(!nhxMatch)return{name:nameWithNhx,nhx:{}};const nhxString=nhxMatch[1];const cleanName=nameWithNhx.replace(/\\[&&NHX:[^\\]]+\\]/,'').replace(/\"/g,'');console.log(\"\\uD83D\\uDD0D Parsing NHX: \\\"\".concat(nhxString,\"\\\" from \\\"\").concat(nameWithNhx,\"\\\"\"));const nhxData={};// Split on ':' but handle key=value pairs properly\nconst parts=nhxString.split(':');for(const part of parts){if(part.includes('=')){const[key,value]=part.split('=',2);nhxData[key.trim()]=value.trim();console.log(\"  \\uD83D\\uDCDD Found NHX pair: \".concat(key.trim(),\" = \").concat(value.trim()));}}return{name:cleanName,nhx:nhxData};};const convertToD3Hierarchy=node=>{const{name,nhx}=extractNhxData(node.name);return{name:name,nhx:nhx,length:node.length,children:node.children?node.children.map(convertToD3Hierarchy):undefined};};const data=convertToD3Hierarchy(parsed);console.log('🌳 Converted D3 tree data:',data);const{width,height}=container.getBoundingClientRect();const radius=Math.min(width,height)/2-20;const margin=20;// how much space round the outside\nconst diameter=radius*2;const svg=d3.select(container).append('svg').attr('viewBox',[-radius-margin,-radius-margin,diameter+margin*2,diameter+margin*2]).attr('width','100%').attr('height','100%').style('font','10px sans-serif');const g=svg.append('g');const root=d3.hierarchy(data);d3.cluster().size([2*Math.PI,radius-50])(root);// Create color mapping for NHX traits\nconst colorField='Trait';const colorMap={};let colorIndex=0;const colorScale=d3.schemeCategory10;root.each(d=>{var _d$data$nhx;const val=(_d$data$nhx=d.data.nhx)===null||_d$data$nhx===void 0?void 0:_d$data$nhx[colorField];if(val&&!(val in colorMap)){colorMap[val]=colorScale[colorIndex++%colorScale.length];console.log(\"\\uD83C\\uDFA8 Assigned color to \\\"\".concat(val,\"\\\":\"),colorMap[val]);}});console.log('🌈 Final color map:',colorMap);// Draw links\ng.append('g').selectAll('path').data(root.links()).join('path').attr('fill','none').attr('stroke','#ccc').attr('stroke-width',1).attr('d',d3.linkRadial().angle(d=>d.x).radius(d=>d.y));// Draw nodes\ng.append('g').selectAll('circle').data(root.descendants()).join('circle').attr('transform',d=>\"\\n        rotate(\".concat(d.x*180/Math.PI-90,\")\\n        translate(\").concat(d.y,\",0)\\n      \")).attr('r',4).attr('fill',d=>{var _d$data$nhx2;const val=(_d$data$nhx2=d.data.nhx)===null||_d$data$nhx2===void 0?void 0:_d$data$nhx2[colorField];const color=val?colorMap[val]:'#555';console.log(\"\\uD83D\\uDD35 Node \\\"\".concat(d.data.name,\"\\\" (\").concat(colorField,\": \").concat(val,\") \\u2192 fill: \").concat(color));return color;}).attr('stroke','#fff').attr('stroke-width',1);// Draw labels\ng.append('g').selectAll('text').data(root.descendants().filter(d=>!d.children))// Only leaf nodes\n.join('text').attr('transform',d=>\"\\n        rotate(\".concat(d.x*180/Math.PI-90,\")\\n        translate(\").concat(d.y,\",0)\\n        rotate(\").concat(d.x>=Math.PI?180:0,\")\\n      \")).attr('dy','0.31em').attr('x',d=>d.x<Math.PI?8:-8).attr('text-anchor',d=>d.x<Math.PI?'start':'end').text(d=>d.data.name).style('font-size','12px').style('fill','#333');// Add legend for colors\nconst inset=5;if(Object.keys(colorMap).length>0){const legend=svg.append('g').attr('transform',\"translate(\".concat(-radius-margin+inset,\", \").concat(-radius-margin+inset,\")\"));const items=Object.entries(colorMap);legend.selectAll('rect').data(items).join('rect').attr('x',0).attr('y',(_,i)=>i*20).attr('width',15).attr('height',15).attr('fill',d=>d[1]);legend.selectAll('text').data(items).join('text').attr('x',20).attr('y',(_,i)=>i*20+12).text(d=>\"Trait: \".concat(d[0])).style('font-size','12px').style('fill','#333');}console.log('✅ Tree rendered with NHX coloring');setDebugInfo(\"Tree rendered successfully. Found \".concat(Object.keys(colorMap).length,\" different \").concat(colorField,\" values.\"));},[newickStr,isNhx]);return/*#__PURE__*/_jsx(\"div\",{ref:containerRef,className:\"w-full h-full\",style:{overflow:'hidden'}});};export default PhyloTreeViewer;","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsx","_jsx","PhyloTreeViewer","_ref","newick","newickStr","isNhx","containerRef","debugInfo","setDebugInfo","parseNewick","newickString","pos","parseNode","node","name","length","children","test","push","char","substr","nhxEnd","substring","trim","lengthStr","parseFloat","annStart","annEnd","container","current","select","selectAll","remove","console","log","slice","concat","parsed","err","error","message","extractNhxData","nameWithNhx","nhx","nhxMatch","match","nhxString","cleanName","replace","nhxData","parts","split","part","includes","key","value","convertToD3Hierarchy","map","undefined","data","width","height","getBoundingClientRect","radius","Math","min","margin","diameter","svg","append","attr","style","g","root","hierarchy","cluster","size","PI","colorField","colorMap","colorIndex","colorScale","schemeCategory10","each","d","_d$data$nhx","val","links","join","linkRadial","angle","x","y","descendants","_d$data$nhx2","color","filter","text","inset","Object","keys","legend","items","entries","_","i","ref","className","overflow"],"sources":["/Users/lucanest/Desktop/f.nosync/msaviz/frontend/src/components/PhyloTreeViewer.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\n\nconst PhyloTreeViewer = ({ newick: newickStr, isNhx = false }) => {\n  const containerRef = useRef();\n  const [debugInfo, setDebugInfo] = useState('');\n\n  // Enhanced Newick parser that properly handles NHX annotations\n  const parseNewick = (newickString) => {\n    let pos = 0;\n    \n    const parseNode = () => {\n      const node = { name: '', length: 0, children: [] };\n      \n      // Skip whitespace\n      while (pos < newickString.length && /\\s/.test(newickString[pos])) pos++;\n      \n      if (pos >= newickString.length) return node;\n      \n      // Handle internal node with children\n      if (newickString[pos] === '(') {\n        pos++; // skip '('\n        \n        // Parse children\n        do {\n          // Skip whitespace\n          while (pos < newickString.length && /\\s/.test(newickString[pos])) pos++;\n          \n          if (newickString[pos] === ')') break;\n          \n          node.children.push(parseNode());\n          \n          // Skip whitespace\n          while (pos < newickString.length && /\\s/.test(newickString[pos])) pos++;\n          \n          if (newickString[pos] === ',') {\n            pos++; // skip ','\n          }\n        } while (pos < newickString.length && newickString[pos] !== ')');\n        \n        if (newickString[pos] === ')') pos++; // skip ')'\n      }\n      \n      // Parse name (including NHX annotations)\n      let name = '';\n      while (pos < newickString.length) {\n        const char = newickString[pos];\n        \n        if (char === ':' || char === ',' || char === ')' || char === ';') {\n          break;\n        }\n        \n        // Handle NHX annotations - include everything between [&&NHX: and ]\n        if (char === '[' && newickString.substr(pos, 6) === '[&&NHX') {\n          let nhxEnd = pos;\n          while (nhxEnd < newickString.length && newickString[nhxEnd] !== ']') {\n            nhxEnd++;\n          }\n          if (nhxEnd < newickString.length) nhxEnd++; // include the closing ]\n          name += newickString.substring(pos, nhxEnd);\n          pos = nhxEnd;\n        } else {\n          name += char;\n          pos++;\n        }\n      }\n      \n      node.name = name.trim();\n      \n      // Parse branch length\n      if (pos < newickString.length && newickString[pos] === ':') {\n        pos++; // skip ':'\n        let lengthStr = '';\n        while (pos < newickString.length && /[\\d.eE+-]/.test(newickString[pos])) {\n          lengthStr += newickString[pos++];\n        }\n        node.length = parseFloat(lengthStr) || 0;\n\n        // — now pull in any NHX annotation that follows the length —\n        while (\n          pos < newickString.length &&\n          newickString[pos] === '[' &&\n          newickString.substr(pos, 6) === '[&&NHX'\n        ) {\n          let annStart = pos;\n          // find the closing bracket\n          let annEnd = annStart;\n          while (annEnd < newickString.length && newickString[annEnd] !== ']') {\n            annEnd++;\n          }\n          if (annEnd < newickString.length) annEnd++;  // include the ']'\n          \n          // append it onto the “name” field so extractNhxData will see it\n          node.name += newickString.substring(annStart, annEnd);\n          pos = annEnd; \n        }\n      }\n\n      return node;\n    };\n    \n    return parseNode();\n  };\n\n  useEffect(() => {\n    if (!newickStr) return;\n\n    const container = containerRef.current;\n    if (!container) return;\n\n    // Clear previous content\n    d3.select(container).selectAll('*').remove();\n\n    console.log('📄 Raw Newick/NHX input:', newickStr.slice(0, 200));\n    setDebugInfo(`Processing: ${newickStr.slice(0, 100)}...`);\n\n    let parsed;\n    try {\n      parsed = parseNewick(newickStr);\n      console.log('✅ Parsed tree:', parsed);\n    } catch (err) {\n      console.error('❌ Failed to parse Newick:', err);\n      setDebugInfo(`Parse error: ${err.message}`);\n      return;\n    }\n\n    const extractNhxData = (nameWithNhx) => {\n      if (!nameWithNhx || !isNhx) return { name: nameWithNhx || '', nhx: {} };\n      \n      const nhxMatch = nameWithNhx.match(/\\[&&NHX:([^\\]]+)\\]/);\n      if (!nhxMatch) return { name: nameWithNhx, nhx: {} };\n      \n      const nhxString = nhxMatch[1];\n      const cleanName = nameWithNhx.replace(/\\[&&NHX:[^\\]]+\\]/, '').replace(/\"/g, '');\n      \n      console.log(`🔍 Parsing NHX: \"${nhxString}\" from \"${nameWithNhx}\"`);\n      \n      const nhxData = {};\n      // Split on ':' but handle key=value pairs properly\n      const parts = nhxString.split(':');\n      for (const part of parts) {\n        if (part.includes('=')) {\n          const [key, value] = part.split('=', 2);\n          nhxData[key.trim()] = value.trim();\n          console.log(`  📝 Found NHX pair: ${key.trim()} = ${value.trim()}`);\n        }\n      }\n      \n      return { name: cleanName, nhx: nhxData };\n    };\n\n    const convertToD3Hierarchy = (node) => {\n      const { name, nhx } = extractNhxData(node.name);\n      return {\n        name: name,\n        nhx: nhx,\n        length: node.length,\n        children: node.children ? node.children.map(convertToD3Hierarchy) : undefined\n      };\n    };\n\n    const data = convertToD3Hierarchy(parsed);\n    console.log('🌳 Converted D3 tree data:', data);\n\n    const { width, height } = container.getBoundingClientRect();\n    const radius = Math.min(width, height) / 2 - 20;\n    const margin = 20;    // how much space round the outside\n    const diameter = radius * 2;\n\n    const svg = d3.select(container)\n      .append('svg')\n      .attr('viewBox', [\n      -radius - margin,\n      -radius - margin,\n      diameter + margin * 2,\n      diameter + margin * 2\n    ])\n      .attr('width', '100%')\n      .attr('height', '100%')\n      .style('font', '10px sans-serif');\n\n    const g = svg.append('g');\n\n    const root = d3.hierarchy(data);\n    d3.cluster().size([2 * Math.PI, radius - 50])(root);\n\n    // Create color mapping for NHX traits\n    const colorField = 'Trait';\n    const colorMap = {};\n    let colorIndex = 0;\n    const colorScale = d3.schemeCategory10;\n\n    root.each(d => {\n      const val = d.data.nhx?.[colorField];\n      if (val && !(val in colorMap)) {\n        colorMap[val] = colorScale[colorIndex++ % colorScale.length];\n        console.log(`🎨 Assigned color to \"${val}\":`, colorMap[val]);\n      }\n    });\n\n    console.log('🌈 Final color map:', colorMap);\n\n    // Draw links\n    g.append('g')\n      .selectAll('path')\n      .data(root.links())\n      .join('path')\n      .attr('fill', 'none')\n      .attr('stroke', '#ccc')\n      .attr('stroke-width', 1)\n      .attr('d', d3.linkRadial()\n        .angle(d => d.x)\n        .radius(d => d.y));\n\n    // Draw nodes\n    g.append('g')\n      .selectAll('circle')\n      .data(root.descendants())\n      .join('circle')\n      .attr('transform', d => `\n        rotate(${(d.x * 180 / Math.PI - 90)})\n        translate(${d.y},0)\n      `)\n      .attr('r', 4)\n      .attr('fill', d => {\n        const val = d.data.nhx?.[colorField];\n        const color = val ? colorMap[val] : '#555';\n        console.log(`🔵 Node \"${d.data.name}\" (${colorField}: ${val}) → fill: ${color}`);\n        return color;\n      })\n      .attr('stroke', '#fff')\n      .attr('stroke-width', 1);\n\n    // Draw labels\n    g.append('g')\n      .selectAll('text')\n      .data(root.descendants().filter(d => !d.children)) // Only leaf nodes\n      .join('text')\n      .attr('transform', d => `\n        rotate(${(d.x * 180 / Math.PI - 90)})\n        translate(${d.y},0)\n        rotate(${d.x >= Math.PI ? 180 : 0})\n      `)\n      .attr('dy', '0.31em')\n      .attr('x', d => d.x < Math.PI ? 8 : -8)\n      .attr('text-anchor', d => d.x < Math.PI ? 'start' : 'end')\n      .text(d => d.data.name)\n      .style('font-size', '12px')\n      .style('fill', '#333');\n\n    // Add legend for colors\n      const inset = 5;\n\n      if (Object.keys(colorMap).length > 0) {\n        const legend = svg.append('g')\n          .attr(\n            'transform',\n            `translate(${-radius - margin + inset}, ${-radius - margin + inset})`\n          );\n\n        const items = Object.entries(colorMap);\n\n        legend.selectAll('rect')\n          .data(items)\n          .join('rect')\n            .attr('x', 0)\n            .attr('y', (_, i) => i * 20)\n            .attr('width', 15)\n            .attr('height', 15)\n            .attr('fill', d => d[1]);\n\n        legend.selectAll('text')\n          .data(items)\n          .join('text')\n            .attr('x', 20)\n            .attr('y', (_, i) => i * 20 + 12)\n            .text(d => `Trait: ${d[0]}`)\n            .style('font-size', '12px')\n            .style('fill', '#333');\n      }\n\n    console.log('✅ Tree rendered with NHX coloring');\n    setDebugInfo(`Tree rendered successfully. Found ${Object.keys(colorMap).length} different ${colorField} values.`);\n\n  }, [newickStr, isNhx]);\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"w-full h-full\"\n      style={{ overflow: 'hidden' }}\n    />\n  );\n};\nexport default PhyloTreeViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}