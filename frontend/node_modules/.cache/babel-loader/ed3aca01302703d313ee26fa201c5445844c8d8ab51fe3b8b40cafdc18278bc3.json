{"ast":null,"code":"import { cast } from './cast';\nimport { dfs } from './dfs';\n/**\n * Applies a callback to each node of a Newick tree, returning the modified tree.\n * @param tree - Newick string or tree object\n * @param callback - Function applied to each node\n * @returns Modified tree object\n */\nexport function map(tree) {\n  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e => e;\n  const castedTree = cast(tree);\n  // The original code had dfs(tree, null, callback)\n  // Our dfs only accepts (tree, nodeCallback)\n  dfs(castedTree, callback);\n  return castedTree;\n}","map":{"version":3,"names":["cast","dfs","map","tree","callback","arguments","length","undefined","e","castedTree"],"sources":["/Users/lucanest/Desktop/f.nosync/msaviz/frontend/node_modules/newick/dist/esm/tools/map.js"],"sourcesContent":["import { cast } from './cast';\nimport { dfs } from './dfs';\n/**\n * Applies a callback to each node of a Newick tree, returning the modified tree.\n * @param tree - Newick string or tree object\n * @param callback - Function applied to each node\n * @returns Modified tree object\n */\nexport function map(tree, callback = (e) => e) {\n    const castedTree = cast(tree);\n    // The original code had dfs(tree, null, callback)\n    // Our dfs only accepts (tree, nodeCallback)\n    dfs(castedTree, callback);\n    return castedTree;\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,QAAQ;AAC7B,SAASC,GAAG,QAAQ,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAGA,CAACC,IAAI,EAAuB;EAAA,IAArBC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAIG,CAAC,IAAKA,CAAC;EACzC,MAAMC,UAAU,GAAGT,IAAI,CAACG,IAAI,CAAC;EAC7B;EACA;EACAF,GAAG,CAACQ,UAAU,EAAEL,QAAQ,CAAC;EACzB,OAAOK,UAAU;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}